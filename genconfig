#!/bin/sh
#
# genconfig - creates an OpenWrt config file for oldconfig
# Copyright (C) 2012  Philipp Psurek <phip@vmail.me>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

version(){
echo "genconfig Version 0.0.20120618"

cat << EOF
Copyright © 2012 Philipp Psurek <phip@vmail.me>
            2012 Freifunk Rheinland <http://www.freifunk-rheinland.net/>

Lizenz GPLv3+: GNU GPL Version 3 oder höher <http://gnu.org/licenses/gpl.html>
Dies ist freie Software: Sie können sie ändern und weitergeben.
Es gibt keinerlei Garantien, soweit wie es das Gesetz erlaubt.
EOF
}

usage(){
cat << EOF
Aufruf: genconfig <flavour>
        genconfig [-h|-v]

Flavour:
# D-Link 
  dir300            DIR-300
# Linksys
  wrt54g            WTR54G <V4, WTR54GL
# TP-LINK
  tplite            TL-WR741ND, TL-WR841ND, TL-WR941ND, …
  tpusb             TL-WR1043ND, TL-WR2543ND, …
  tp                all

Optionen:
  -h, --help        Hilfe
  -v, --version     Version
EOF
}

# cat .config | grep -v -e "^#"
# while true; do echo; done | make oldconfig >/dev/null

# ar71xx
target_ar71xx(){
cat << EOF
CONFIG_TARGET_ar71xx=y
CONFIG_TARGET_ar71xx_generic=y
CONFIG_TARGET_ar71xx_generic_Default=y
CONFIG_HAS_SUBTARGETS=y
CONFIG_TARGET_BOARD="ar71xx"
CONFIG_TARGET_ARCH_PACKAGES="ar71xx"
EOF
}

# TODO
# DIR-300
target_atheros(){
cat << EOF
CONFIG_TARGET_atheros=y
CONFIG_TARGET_atheros_Default=y
CONFIG_TARGET_BOARD="atheros"
CONFIG_TARGET_ARCH_PACKAGES="atheros"

CONFIG_PACKAGE_kmod-ath5k=y
# CONFIG_PACKAGE_kmod-cfg80211 is not set

CONFIG_MADWIFI_SINGLE_MODULE=y
CONFIG_MADWIFI_RCA_MINSTREL=y

# CONFIG_MADWIFI_RCA_SAMPLERATE is not set

# CONFIG_PACKAGE_kmod-mac80211-hwsim is not set
# CONFIG_PACKAGE_kmod-madwifi is not set

# CONFIG_MADWIFI_COMPRESSION is not set

CONFIG_PACKAGE_kmod-madwifi=y
# CONFIG_PACKAGE_kmod-mac80211 is not set
# CONFIG_PACKAGE_kmod-mac80211-hwsim is not set

CONFIG_BUSYBOX_CONFIG_FEATURE_HAVE_RPC=y

EOF
}

# TODO
# Linksys
target_brcm47xx(){
cat << EOF
CONFIG_TARGET_brcm47xx=y
CONFIG_TARGET_brcm47xx_Broadcom-b43=y
CONFIG_TARGET_BOARD="brcm47xx"
CONFIG_TARGET_ARCH_PACKAGES="brcm47xx"

CONFIG_DEFAULT_kmod-b43=y
CONFIG_DEFAULT_kmod-b43legacy=y
CONFIG_DEFAULT_kmod-diag=y
CONFIG_DEFAULT_kmod-switch=y
CONFIG_DEFAULT_nvram=y

CONFIG_PCMCIA_SUPPORT=y

CONFIG_PACKAGE_nvram=y
CONFIG_PACKAGE_kmod-diag=y
CONFIG_PACKAGE_kmod-switch=y
CONFIG_PACKAGE_kmod-b43=y

CONFIG_B43_FW_5_100_138=y
CONFIG_B43_FW_SQUASH=y
CONFIG_B43_FW_SQUASH_COREREVS="5,6,7,8,9,10,11,13,14,15,16"
CONFIG_B43_FW_SQUASH_PHYTYPES="G,LP,N"
CONFIG_PACKAGE_B43_PHY_N=y
# CONFIG_PACKAGE_kmod-b43legacy is not set

CONFIG_B43LEGACY_FW_SQUASH=y
CONFIG_B43LEGACY_FW_SQUASH_COREREVS="1,2,3,4"
EOF
}

# Konfiguration für alle FF-Knoten
default(){
# kein JJFS2, kein ext4, .tar.gz zum Überprüfen
cat << EOF
# CONFIG_TARGET_ROOTFS_INITRAMFS is not set
# CONFIG_TARGET_ROOTFS_CPIOGZ is not set
CONFIG_TARGET_ROOTFS_TARGZ=y
# CONFIG_TARGET_ROOTFS_EXT4FS is not set
# CONFIG_TARGET_ROOTFS_JFFS2 is not set
CONFIG_TARGET_ROOTFS_SQUASHFS=y
# Default IP
CONFIG_TARGET_PREINIT_IP="192.168.123.1"
CONFIG_TARGET_PREINIT_NETMASK="255.255.255.0"
CONFIG_TARGET_PREINIT_BROADCAST="192.168.123.255"
EOF

# IPv6 on board
echo "CONFIG_IPV6=y"

# B.A.T.M.A.N.-adv - der Kern des Freifunks
echo "
CONFIG_PACKAGE_kmod-batman-adv=y
CONFIG_KMOD_BATMAN_ADV_DEBUG_LOG=y
CONFIG_KMOD_BATMAN_ADV_BATCTL=y"

# PPP wird nicht benötigt
echo "
CONFIG_PACKAGE_ppp=m
CONFIG_PACKAGE_ppp-mod-pppoe=m"

# Zeilen von zwei Dateien über ein gemeinsames Feld verbinden
echo "
CONFIG_PACKAGE_coreutils=y
CONFIG_PACKAGE_coreutils-join=y"

# Sperren von p2p-Tabellen
echo "CONFIG_PACKAGE_flock=y"

# Image Generator für vereinfachtes Bauen und gemeinsamen Paketsatz
echo "CONFIG_IB=y"

# SDK zur Paketintegration
#echo "CONFIG_SDK=y"

# Toolchain (benötigt ua. für den Image Generator für au1000)
#echo "CONFIG_MAKE_TOOLCHAIN=y"

# aus Kompatibilitätsgründen, kann weg, wenn $RANDOM nicht mehr benötigt
echo "CONFIG_BUSYBOX_CONFIG_ASH_RANDOM_SUPPORT=y"

# Verwendung unklar
echo "CONFIG_PACKAGE_kmod-bonding=m"
}

packages_firewall(){
# Firewall
echo "CONFIG_PACKAGE_firewall="
echo "CONFIG_PACKAGE_iptables="
echo "CONFIG_PACKAGE_ip6tables="

# TODO Bedarf überprüfen
echo "CONFIG_PACKAGE_librt="

# TODO Bedarf überprüfen
echo "CONFIG_PACKAGE_kmod-ledtrig-netfilter="

# TODO Bedarf überprüfen - kein Bedarf
#echo "CONFIG_PACKAGE_kmod-lib-crc-ccitt="

# TODO Bedarf überprüfen
echo "CONFIG_PACKAGE_iptables-mod-nat-extra="

# Freifunk P2P-Blocker
echo "CONFIG_PACKAGE_freifunk-p2pblock="
}

# DHCP und radv
packages_dhcp(){
cat << EOF
CONFIG_PACKAGE_dnsmasq=
CONFIG_PACKAGE_wide-dhcpv6-server=
CONFIG_PACKAGE_radvd=
EOF
}

# n2n-Tunnel
packages_n2n(){
cat << EOF
CONFIG_PACKAGE_n2n=
EOF
}

# wird OpenVPN aktiviert, dann mit weiteren Optionen (=y)
packages_openvpn(){
cat << EOF
CONFIG_PACKAGE_openvpn=
CONFIG_OPENVPN_DISABLE_EUREPHIA=y
CONFIG_OPENVPN_DISABLE_MANAGEMENT=y
CONFIG_OPENVPN_ENABLE_PASSWORD_SAVE=y
EOF
}

# nur für mod941er, 1043er, 2543er, 3420er und andere mit USB
packages_usb(){
cat << EOF
CONFIG_PACKAGE_kmod-ledtrig-usbdev=
CONFIG_PACKAGE_kmod-usb2=
EOF

#CONFIG_PACKAGE_kmod-usb-ohci=
}

# für den 1043er RTL-Switch, im Augenblick deaktiviert
packages_switch(){
cat << EOF
CONFIG_PACKAGE_kmod-libphy=
CONFIG_PACKAGE_kmod-swconfig=
CONFIG_PACKAGE_kmod-switch-rtl8366-smi=
CONFIG_PACKAGE_kmod-switch-rtl8366rb=
EOF
}

# Webserver für Splash
packages_webserver(){
cat << EOF
CONFIG_PACKAGE_uhttpd=
EOF
}

# benötigte Hilfsprogramme
packages_used_util(){
cat << EOF
CONFIG_PACKAGE_iputils-ping6=
EOF
}

# zusätzliche Hilfsprogramme als Modul
packages_util(){
cat << EOF
CONFIG_PACKAGE_iputils-ping=
CONFIG_PACKAGE_iputils-tracepath=
CONFIG_PACKAGE_iputils-tracepath6=
CONFIG_PACKAGE_iputils-traceroute6=

CONFIG_PACKAGE_nano=

CONFIG_PACKAGE_iperf=
CONFIG_PACKAGE_iperf-mt=
CONFIG_PACKAGE_wireless-tools=m
EOF
}

# unbekannte Kernel-Module. TODO: Bedarf überprüfen oder kommentieren
packages_unknown(){
cat << EOF
CONFIG_PACKAGE_kmod-button-hotplug=
CONFIG_PACKAGE_kmod-input-gpio-keys-polled=
CONFIG_PACKAGE_kmod-input-polldev=
EOF
}

# Wichtige Pakete, von der Firmware gefordert
# hbbp - UDP-Broadcast für 
# nacl - salt for hbbp
# kmod-nfnetlink - Kernel modules support for a netlink-based userspace interface
packages_ffrl(){
cat << EOF
CONFIG_PACKAGE_hbbp=
CONFIG_PACKAGE_nacl=
CONFIG_PACKAGE_kmod-nfnetlink=
CONFIG_PACKAGE_ffrl-fsm=y
CONFIG_PACKAGE_ffrl-fsm-inetable=y
CONFIG_PACKAGE_ffrl-fsm-update=y
CONFIG_PACKAGE_ffrl-n2n-watchdog=y
CONFIG_PACKAGE_ffrl-nodeid=y
CONFIG_PACKAGE_ffrl-p2ptbl=y
CONFIG_PACKAGE_ffrl-shuf=y
CONFIG_PACKAGE_ffrl-urlencoder=y
CONFIG_PACKAGE_ffrl-webservice=y
CONFIG_PACKAGE_ffrl-key-lcb=m
CONFIG_PACKAGE_ffrl-key-phip=m
EOF
}

# FF-Rheinland Pakete und Helfer (als Module zum Austesten)
packages_ffrl_util(){
cat << EOF
CONFIG_PACKAGE_ffrl-nodeconfig=
EOF
}

gen_config(){
#               ------
if [ "$case" = "ar71xx" ] || [ "$case" = "tp" ]; then
#               ------
target_ar71xx
default
packages_firewall  | sed -e "s/=$/=y/g"
packages_dhcp      | sed -e "s/=$/=y/g"
packages_n2n       | sed -e "s/=$/=y/g"
packages_openvpn   | sed -e "s/=$/=y/g"
#packages_usb      | sed -e "s/=$/=y/g" # USB wird bei Bedarf vom Buildroot selbst eingebaut
#packages_switch   | sed -e "s/=$/=m/g" # Switch wird vom Buildroot selbst geregelt
packages_webserver | sed -e "s/=$/=y/g"
packages_used_util | sed -e "s/=$/=y/g"
packages_util      | sed -e "s/=$/=m/g"
packages_unknown   | sed -e "s/=$/=y/g" # unbekannte Kernel-Module. TODO: Bedarf überprüfen
packages_ffrl      | sed -e "s/=$/=y/g"
packages_ffrl_util | sed -e "s/=$/=m/g"

#                 -------
elif [ "$case" = "atheros" ] || [ "$case" = "dir300" ]; then
#                 -------
target_atheros
default
packages_firewall  | sed -e "s/=$/=m/g"
packages_dhcp      | sed -e "s/=$/=m/g"
packages_n2n       | sed -e "s/=$/=y/g"
packages_openvpn   | sed -e "s/=$/=m/g"
#packages_usb       | sed -e "s/=$/=m/g"
#packages_switch    | sed -e "s/=$/=m/g"
packages_webserver | sed -e "s/=$/=m/g"
packages_used_util | sed -e "s/=$/=y/g"
packages_util      | sed -e "s/=$/=m/g"
#packages_unknown   | sed -e "s/=$/=m/g"
packages_ffrl      | sed -e "s/=$/=y/g"
packages_ffrl_util | sed -e "s/=$/=y/g"

#                 --------
elif [ "$case" = "brcm47xx" ] || [ "$case" = "wrt54g" ]; then
#                 --------
target_brcm47xx
default
packages_firewall  | sed -e "s/=$/=m/g"
packages_dhcp      | sed -e "s/=$/=m/g"
packages_n2n       | sed -e "s/=$/=y/g"
packages_openvpn   | sed -e "s/=$/=m/g"
#packages_usb       | sed -e "s/=$/=m/g"
#packages_switch    | sed -e "s/=$/=m/g"
packages_webserver | sed -e "s/=$/=m/g"
packages_used_util | sed -e "s/=$/=y/g"
packages_util      | sed -e "s/=$/=m/g"
#packages_unknown   | sed -e "s/=$/=m/g"
packages_ffrl      | sed -e "s/=$/=y/g"
packages_ffrl_util | sed -e "s/=$/=y/g"
else
  echo "Ungültige Eingabe"
  exit 1
fi
}

# Eingabeverarbeitung
if [ "$1" != "" ]; then
  case=$1
  case "$case" in
  --help|-h)
    usage
    exit 0
    ;;
  --version|-v)
    version
    exit 0
    ;;
  *)
    gen_config
    ;;
  esac
else
  usage
fi

